plugins {
    id "java"
    id "net.kyori.blossom" version "1.1.0"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "DiscordMusic"
version = "2.4.4"

blossom {
    replaceToken("@version@", version)
}

configurations {
    provided {
        compile.extendsFrom(provided)
    }
}

repositories {
    jcenter()
    maven {
        name = "lxgaming"
        url = "https://dl.bintray.com/lxgaming/maven"
    }
}

dependencies {
    compile("com.google.code.gson:gson:2.8.6")
    compile("com.google.guava:guava:30.1-jre")
    compile("com.jagrosh:jda-utilities-menu:3.0.+")
    compile("com.sedmelluq:lavaplayer:1.3.+")
    compile("io.github.lxgaming:common:1.1.1")
    compile("net.dv8tion:JDA:4.2.+")
    compile("org.apache.commons:commons-lang3:3.11")
    compile("org.apache.commons:commons-text:1.9")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.14.0")
    compile("org.apache.logging.log4j:log4j-core:2.14.0")
    compile("org.apache.logging.log4j:log4j-slf4j-impl:2.14.0")
    compile("org.fusesource.jansi:jansi:2.0.1")
}

jar {
    manifest {
        attributes("Main-Class": "io.github.lxgaming.discordmusic.Main")
    }

    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }

    //exclude("natives/darwin/**")
    //exclude("natives/linux-aarch64/**")
    //exclude("natives/linux-arm/**")
    //exclude("natives/linux-x86/**")
    //exclude("natives/linux-x86-64/**")
    //exclude("natives/win-x86/**")
    //exclude("natives/win-x86-64/**")
    //exclude("natives/win32-x86/**")
    //exclude("natives/win32-x86-64/**")
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-${archivesBaseName}")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}