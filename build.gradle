plugins {
    id "java"
    id "net.kyori.blossom" version "1.3.0"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "DiscordMusic"
version = "2.5.2"

blossom {
    replaceToken("@version@", version)
}

configurations {
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        name = "dv8tion"
        url = "https://m2.dv8tion.net/releases"
    }
}

dependencies {
    implementation("com.google.code.gson:gson:2.8.9")
    implementation("com.google.guava:guava:31.0.1-jre")
    implementation("com.jagrosh:jda-utilities-menu:3.0.+")
    implementation("com.sedmelluq:lavaplayer:1.3.+")
    implementation("io.github.lxgaming:common:1.1.1")
    implementation("net.dv8tion:JDA:4.3.+")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.apache.commons:commons-text:1.9")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.14.1")
    implementation("org.apache.logging.log4j:log4j-core:2.14.1")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.14.1")
    implementation("org.fusesource.jansi:jansi:2.4.0")
}

jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes("Main-Class": "io.github.lxgaming.discordmusic.Main")
    }

    from {
        configurations.runtimeClasspath.findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-${archivesBaseName}")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}